package view;

import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.DefaultCaret;

public class Client extends JFrame {
	private final String DEFAULT_TEXT = "Nhập tin nhắn vào đây!!!";
	private JTextField userText;
	private JTextArea chatWindow;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	private String message = "";
	private String serverIP;
	private Socket connection;

	public Client(String host) {
		super("Client !");
		serverIP = host;
		userText = new JTextField("Nhập tin nhắn vào đây!!!");
		userText.setEditable(false);
		userText.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				sendMessage(e.getActionCommand());
				userText.setText("");
			}
		});
		userText.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e){
				if(e.getButton() == MouseEvent.BUTTON1 && userText.getText().equals(DEFAULT_TEXT)){
					userText.setText("");
				}
				if(!userText.hasFocus()){
					if(userText.getText().equals("")){
						userText.setText(DEFAULT_TEXT);
					}
				}
			}
		});
		add(userText, BorderLayout.NORTH);
		chatWindow = new JTextArea();
		add(new JScrollPane(chatWindow), BorderLayout.CENTER);
		setSize(300, 150);
		setVisible(true);
	}

	// connect to server
	public void startRunning() {
		try {
			connectToServer();
			setupStreams();
			whileChatting();
		} catch (EOFException eofException) {
			showMessage("\n Client terminated connection");
		} catch (IOException ioException) {
			ioException.printStackTrace();
		} finally {
			closeConnection();
		}
	}

	private void connectToServer() throws IOException {
		showMessage("Attempting connection... \n");
		connection = new Socket(InetAddress.getByName(serverIP), 6789);
		showMessage("Connected to: " + connection.getInetAddress().getHostAddress());
	}

	// set up streams
	private void setupStreams() throws IOException {
		output = new ObjectOutputStream(connection.getOutputStream());
		output.flush();
		input = new ObjectInputStream(connection.getInputStream());
		showMessage("\n The streams are now set up! \n");
	}

	// while chatting with server
	private void whileChatting() throws IOException {
		ableToType(true);
		do {
			try {
				getNewMessage();
				if(checkNewMessage()){
					showMessage("\n" + message);
				}
			} catch (ClassNotFoundException classNotFoundException) {
				showMessage("Unknown data received!");
			} catch (IOException io){
				showMessage("Oops! Something went wrong!");
				break;
			}
			DefaultCaret caret = (DefaultCaret) chatWindow.getCaret();
			caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
		} while (!message.equals("SERVER - END"));
	}

	private boolean checkNewMessage() throws ClassNotFoundException, IOException {
		if (message.equals("SERVER - ") || message.equals("")) {
			return false;
		} else {
			return true;
		}

	}

	private void getNewMessage() throws ClassNotFoundException, IOException {
		message = input.readObject().toString();
	}

	// Close connection
	private void closeConnection() {
		showMessage("\n Closing the connection!");
		ableToType(false);
		try {
			output.close();
			input.close();
			connection.close();
		} catch (IOException ioException) {
			ioException.printStackTrace();
		}

	}

	// send message to server
	private void sendMessage(String message) {
		try {
			output.writeObject("CLIENT - " + message);
			output.flush();
			showMessage("\nCLIENT - " + message);
		} catch (IOException ioException) {
			chatWindow.append("\n Oops! Something went wrong!");
		}
	}

	// update chat window
	private void showMessage(final String message) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				chatWindow.append(message);
			}
		});
	}

	// allows user to type
	private void ableToType(final boolean tof) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				userText.setEditable(tof);
			}
		});
	}
}
