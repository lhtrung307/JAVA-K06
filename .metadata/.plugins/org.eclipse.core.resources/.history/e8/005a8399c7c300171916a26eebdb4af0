package download;

import java.io.*;
import java.net.*;
import java.util.*;

public class Download extends Observable implements Runnable {
	private static final int MAX_BUFFER_SIZE = 1024;
	public static final String STATUSES[] = { "Downloading", "Paused", "Complete", "Cancelled", "Error" };
	private static final int DOWNLOADING = 0;
	private static final int PAUSED = 1;
	private static final int COMPLETE = 2;
	private static final int CANCELLED = 3;
	private static final int ERROR = 4;

	private URL url;
	private int size;
	private int downloaded;
	private int status;

	public Download(URL url) {
		this.url = url;
		size = -1;
		downloaded = 0;
		status = DOWNLOADING;

		download();
	}

	public String getUrl() {
		return url.toString();
	}

	public int getStatus() {
		return status;
	}

	public void pause() {
		status = PAUSED;
		stateChanged();
	}

	public void resume() {
		status = DOWNLOADING;
		stateChanged();
	}

	public void cancel() {
		status = CANCELLED;
		stateChanged();
	}

	public void error() {
		status = ERROR;
		stateChanged();
	}

	private void download() {
		Thread thread = new Thread(this);
		thread.start();
	}

	private String getFileName(URL url) {
		String fileName = url.getFile();
		return fileName.substring(fileName.lastIndexOf('/') + 1);
	}

	public void run() {
		RandomAccessFile file = null;
		InputStream stream = null;
		try {
			// Open connection to URL
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();

			connection.setRequestProperty("Range", "byte = " + downloaded + " - ");
			connection.connect();

			// Make sure response code is in the 200 range.
			if (connection.getResponseCode() / 100 != 2) {
				error();
			}

			// Check for valid content length.
			int contentLength = connection.getContentLength();
			if (contentLength < 1) {
				error();
			}
			
			 /* Set the size for this download if it
	         hasn't been already set. */
	            if (size == -1) {
	                size = contentLength;
	                stateChanged();
	            }
	             
	            // Open file and seek to the end of it.
	            file = new RandomAccessFile(getFileName(url), "rw");
	            file.seek(downloaded);
	             
	            stream = connection.getInputStream();
	            while (status == DOWNLOADING) {
	        /* Size buffer according to how much of the
	           file is left to download. */
	                byte buffer[];
	                if (size - downloaded > MAX_BUFFER_SIZE) {
	                    buffer = new byte[MAX_BUFFER_SIZE];
	                } else {
	                    buffer = new byte[size - downloaded];
	                }
	                 
	                // Read from server into buffer.
	                int read = stream.read(buffer);
	                if (read == -1)
	                    break;
	                 
	                // Write buffer to file.
	                file.write(buffer, 0, read);
	                downloaded += read;
	                stateChanged();
	            }
	             

			if (status == DOWNLOADING) {
				status = COMPLETE;
				stateChanged();
			}

		} catch (Exception e) {
			error();
		} finally {
			// Close file
			if (file != null) {
				try {
					file.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			if (stream != null) {
				try {
					stream.close();
				} catch (Exception e) {
				}
			}
		}
	}

	private void stateChanged() {
		setChanged();
		notifyObservers();
	}

}
